#include "widget.h"
#include <QApplication> //QT的框架文件

int main(int argc, char *argv[])
{
    /*
     * QApplication 应用程序类
       管理图形用户界面应用程序的控制流和主要设置。
       是 Qt 的整个后台管理的命脉它 包含主事件循环，在其中来自窗口系统和
       其它资源的 所有事件处理和调度。它也处理 应用程序的初始化和结束，并且 提供对话管理。

       对于任何一个使用 Qt 的图形用户界面应用程序，都正好存在一个
       QApplication 对象，而不论这个应用程序在同一时间内是不是有 0、1、2 或更多个窗口。
     */
    QApplication a(argc, argv);//QT的框架的初始化
    Widget w; //定义一个窗口对象
    w.show(); //将创建的窗口控件显示出来

    /*
     * qmake是一个协助简化跨平台进行专案开发的构建过程的工具程式，Qt附带的工具之一 。
       手写Makefile是比较困难而且容易出错，尤其在进行跨平台开发时必须针对不同平台分别撰写Makefile，会增加跨平台开发复杂性与困难度。
       qmake会根据专案文件（.pro）里面的信息自动生成适合平台的 Makefile。开发者能够自行撰写专案文件或是由qmake本身产生。
       qmake包含额外的功能来方便 Qt 开发，如自动的包含moc 和 uic 的编译规则
     */

    /*
     * 程序进入消息循环，等待对用户输入进行响应。这里 main()把控制权转交给Qt，
       Qt 完成事件处理工作，当应用程序退出的时候 exec()的值就会返回。
       在exec() 中，Qt接受并处理用户和系统的事件并且把它们传递给适当的窗口 "部件"
     */
    return a.exec();
}
